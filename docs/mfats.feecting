# MFATS

Where you #begin is where you #end from #near to #far and #far to #near then #small to #big and #big to #small on the #path of least #resistance while #TRUE handled by the #controller.

1. #begin and #end at the same location
2. #near to #far uses nearest neighbor algorithms
3. #small to #big uses min-max algorithms
4. #path of least resistance uses dynamic, pathing, nature, evolutionary, and genetic algorithms
5. #TRUE is the keep going making progress while true, and if #false stop to evaluate then #continue.
6. #controller allows for loading of new features such as algorithms, data lists, language models, etc. to be loaded into the #factions without need for #interrupt.


Multi-Faction Algorithm Traveling Salesman (!mfats)

Where you #begin is where you #end from #near to #far and #far to #near then #small to #big and #big to #small on the #path of least #resistance while #TRUE handled by the #controller.

1. #begin and #end at the same location
2. #near to #far uses nearest neighbor algorithms
3. #small to #big uses min-max algorithms
4. #path of least resistance uses dynamic, pathing, nature, evolutionary, and genetic algorithms
5. #TRUE is the keep going making progress while true, and if #false stop to evaluate then #continue.
6. #controller allows for loading of new features such as algorithms, data lists, language models, etc. to be loaded into the #factions without need for #interrupt.
